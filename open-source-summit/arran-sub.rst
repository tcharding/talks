Open Source Summit North America - Proposal Submission
======================================================

Biography
---------
Tobin is a self declared apprentice Linux programmer. After completing
undergraduate and post graduate degrees in computer science, both in
software development, it became clear to him that he still did not
know how to code. One day he decided to open K&R and start from
scratch. Two years later, 40+ tech books, 7 languages, 40 000+ lines
of code, 90+ kernel patches, he still considers himself an
apprentice. He is currently working on getting the ks7010 wi-fi driver
out of staging.

Tobin has been writing Linux kernel code since February. In that time he
has learned how to, and how not to, do a number of beginner
level kernel development tasks. It is his hope that by sharing the
things he learned, others can free themselves from the mistakes he
made.

Tobin lives in Australia. When he is not coding you can find him
learning Brazilian Jiu-Jitsu or playing Lego with his three children.

Abstract Title
--------------
Hacking Device Drivers - How to get into kernel development.

Abstract
--------
Device drivers are an important entry point into Linux kernel
development. The device drivers staging branch is an environment where
newbies are welcome and their efforts are fostered.

In this tutorial you will learn some ways to find useful and
interesting problems to work on, you will learn how to find tasks that
enable you to learn and how to go about contributing your work back to the
kernel.

In this tutorial you will learn how to use kernel development tools
to find tractable problems to contribute to. These include checkpatch.pl,
Sparse, Smatch, and Coccinelle. You will also learn about LKML etiquette (or
how not to get flamed), how to write a git changelog message (or how
not to get flamed), how to use git to ease your work flow, and how
to craft a patch series that is acceptable to the kernel community.

Audience
--------
The audience is any developer interested in getting started with Linux
kernel development. The prerequisites for this tutorial are the same
as the prerequisites for kernel development, namely, you should be
competent with the C programming Language and you should be reasonably
competent with written English. Familiarity with git basics will help,
as will the ability to build mainline kernels.

Attendees can expect to craft a patch series that is potentially
acceptable to be merged into the staging tree of the device driver
subsystem. In doing this, attendees can expect to learn about kernel
tools available to help write clean code and find things to work
on. Attendees can expect to also learn some git commands (rebase, am,
and bisect) as well as how the kernel community expects git changelog
messages to be written. This tutorial will be limited in scope to code
under drivers/staging.

Experience Level
----------------
Intermediate

Benefits to the Ecosystem
-------------------------
This tutorial will help software developers get started working on
useful and interesting problems that can be merged into the
mainline. We aim to also assist kernel maintainers and reviewers by
focusing on some of the common newbie errors seen repeatedly on
kernel mailing lists.

The Linux kernel can be very welcoming of new developers. There are,
however, a number of technical and social/cultural practices that one
should abide by if one wishes to contribute successfully. This
tutorial offers a practical method for acquiring this knowledge in a relaxed
learning environment. Since we are all beginners we can overcome the same
obstacles together.

The lessons in this tutorial were learned first hand by Tobin during
his recent entry into kernel development. They bring with them the
enthusiasm and excitement that is generated by the initial stages of
success in a new endeavor.

Technical Requirements
----------------------
Before the tutorial it will help if attendees;

1. Clone Greg Kroah-Hartman's staging tree

git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git

2. Create a kernel configuration file and enable staging drivers
   (including ks7010). We won't be booting this kernel so any
   configuration is fine as long as staging drivers are built.

Location:
    -> Device Drivers
        -> Staging drivers (STAGING [=y])
            -> KeyStream KS7010 SDIO support (M)

You may also enable any other staging driver that you wish to work on in
the tutorial.

3. Build the kernel.
